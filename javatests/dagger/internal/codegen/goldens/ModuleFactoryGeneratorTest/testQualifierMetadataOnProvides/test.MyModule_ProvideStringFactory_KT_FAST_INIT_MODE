package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.annotation.processing.Generated;

@ScopeMetadata
@QualifierMetadata({
    "test.MethodQualifier",
    "test.ParamQualifier"
})
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class MyModule_ProvideStringFactory implements Factory<Object> {
  private final Provider<Integer> iProvider;

  private MyModule_ProvideStringFactory(Provider<Integer> iProvider) {
    this.iProvider = iProvider;
  }

  @Override
  public Object get() {
    return provideString(iProvider.get());
  }

  public static MyModule_ProvideStringFactory create(Provider<?> iProvider) {
    return new MyModule_ProvideStringFactory((Provider<Integer>) (iProvider));
  }

  public static Object provideString(Object i) {
    return Preconditions.checkNotNullFromProvides(MyModule.provideString((int) (i)));
  }
}
