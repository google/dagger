package test;

import com.google.common.util.concurrent.ListenableFuture;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import dagger.internal.SetFactory;
import dagger.producers.Producer;
import dagger.producers.internal.CancellationListener;
import dagger.producers.internal.Producers;
import dagger.producers.monitoring.ProductionComponentMonitor;
import java.util.concurrent.Executor;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerTestClass_SimpleComponent implements TestClass.SimpleComponent, CancellationListener {
  private final TestClass.BModule bModule;

  private final DaggerTestClass_SimpleComponent simpleComponent = this;

  private Producer<TestClass.A> aEntryPoint;

  private Provider<Executor> executorProvider;

  private Provider<Executor> productionImplementationExecutorProvider;

  private Provider<TestClass.SimpleComponent> simpleComponentProvider;

  private Provider<ProductionComponentMonitor> monitorProvider;

  private Provider<TestClass.B> bProvider;

  private Producer<TestClass.B> bProducer;

  private Producer<TestClass.A> aProducer;

  private DaggerTestClass_SimpleComponent(TestClass.AModule aModuleParam,
      TestClass.BModule bModuleParam) {
    this.bModule = bModuleParam;
    initialize(aModuleParam, bModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestClass.SimpleComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final TestClass.AModule aModuleParam,
      final TestClass.BModule bModuleParam) {
    this.executorProvider = new SwitchingProvider<>(simpleComponent, 0);
    this.productionImplementationExecutorProvider = DoubleCheck.provider((Provider) executorProvider);
    this.simpleComponentProvider = InstanceFactory.create((TestClass.SimpleComponent) simpleComponent);
    this.monitorProvider = DoubleCheck.provider(new SwitchingProvider<ProductionComponentMonitor>(simpleComponent, 1));
    this.bProvider = new SwitchingProvider<>(simpleComponent, 2);
    this.bProducer = Producers.producerFromProvider(bProvider);
    this.aProducer = TestClass_AModule_AFactory.create(aModuleParam, productionImplementationExecutorProvider, monitorProvider, bProducer);
    this.aEntryPoint = Producers.entryPointViewOf(aProducer, this);
  }

  @Override
  public ListenableFuture<TestClass.A> a() {
    return aEntryPoint.get();
  }

  @Override
  public void onProducerFutureCancelled(boolean mayInterruptIfRunning) {

    Producers.cancel(aProducer, mayInterruptIfRunning);
    Producers.cancel(bProducer, mayInterruptIfRunning);
  }

  static final class Builder {
    private TestClass.AModule aModule;

    private TestClass.BModule bModule;

    private Builder() {
    }

    public Builder aModule(TestClass.AModule aModule) {
      this.aModule = Preconditions.checkNotNull(aModule);
      return this;
    }

    public Builder bModule(TestClass.BModule bModule) {
      this.bModule = Preconditions.checkNotNull(bModule);
      return this;
    }

    public TestClass.SimpleComponent build() {
      if (aModule == null) {
        this.aModule = new TestClass.AModule();
      }
      if (bModule == null) {
        this.bModule = new TestClass.BModule();
      }
      return new DaggerTestClass_SimpleComponent(aModule, bModule);
    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerTestClass_SimpleComponent simpleComponent;

    private final int id;

    SwitchingProvider(DaggerTestClass_SimpleComponent simpleComponent, int id) {
      this.simpleComponent = simpleComponent;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // @dagger.producers.Production java.util.concurrent.Executor 
        return (T) TestClass_BModule_ExecutorFactory.executor(simpleComponent.bModule);

        case 1: // dagger.producers.monitoring.ProductionComponentMonitor 
        return (T) TestClass_SimpleComponent_MonitoringModule_MonitorFactory.monitor(simpleComponent.simpleComponentProvider, SetFactory.<ProductionComponentMonitor.Factory>empty());

        case 2: // test.TestClass.B 
        return (T) TestClass_BModule_BFactory.b(simpleComponent.bModule, new TestClass.C());

        default: throw new AssertionError(id);
      }
    }
  }
}

