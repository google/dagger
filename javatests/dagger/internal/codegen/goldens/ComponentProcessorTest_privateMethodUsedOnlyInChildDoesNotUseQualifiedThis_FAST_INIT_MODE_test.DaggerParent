package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerParent {
  private DaggerParent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static Parent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public Parent build() {
      return new ParentImpl();
    }
  }

  private static final class ChildImpl implements Child {
    private final ParentImpl parentImpl;

    private final ChildImpl childImpl = this;

    private ChildImpl(ParentImpl parentImpl) {
      this.parentImpl = parentImpl;


    }

    @Override
    public String string() {
      return parentImpl.parentImplShard.string();
    }
  }

  private static final class ParentImpl implements Parent {
    private final ParentImplShard parentImplShard;

    private final ParentImpl parentImpl = this;

    private ParentImpl() {

      parentImplShard = new ParentImplShard(parentImpl);
    }

    @Override
    public Child child() {
      return new ChildImpl(parentImpl);
    }
  }

  private static final class ParentImplShard {
    private final ParentImpl parentImpl;

    private Provider<Number> numberProvider;

    private ParentImplShard(ParentImpl parentImpl) {
      this.parentImpl = parentImpl;
      initialize();
    }

    private String string() {
      return TestModule_StringFactory.string(numberProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.numberProvider = DoubleCheck.provider(TestModule_NumberFactory.create());
    }
  }
}

