package test;

import com.google.common.collect.ImmutableSet;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import java.util.Set;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder setModule(SetModule setModule) {
      Preconditions.checkNotNull(setModule);
      return this;
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImplShard testComponentImplShard;

    private final TestComponentImpl testComponentImpl = this;

    private TestComponentImpl() {

      testComponentImplShard = new TestComponentImplShard(testComponentImpl);
    }

    @Override
    public Set<String> strings() {
      return testComponentImpl.testComponentImplShard.setOfString();
    }

    @Override
    public Set<Object> objects() {
      return ImmutableSet.<Object>of();
    }

    @Override
    public Set<Integer> onlyContributionIsElementsIntoSet() {
      return testComponentImpl.testComponentImplShard.setOfInteger();
    }
  }

  private static final class TestComponentImplShard {
    private final TestComponentImpl testComponentImpl;

    private TestComponentImplShard(TestComponentImpl testComponentImpl) {
      this.testComponentImpl = testComponentImpl;
    }

    private Set<String> setOfString() {
      return ImmutableSet.<String>builderWithExpectedSize(2).addAll(EmptySetModule_EmptySetFactory.emptySet()).add(SetModule_StringFactory.string()).build();
    }

    private Set<Integer> setOfInteger() {
      return ImmutableSet.<Integer>copyOf(EmptySetModule_OnlyContributionIsElementsIntoSetFactory.onlyContributionIsElementsIntoSet());
    }
  }
}

