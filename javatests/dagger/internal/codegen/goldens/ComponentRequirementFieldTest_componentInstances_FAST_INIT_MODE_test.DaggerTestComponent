package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerTestComponent implements TestComponent {
  private final Dep dep;

  private final DaggerTestComponent testComponent = this;

  private DaggerTestComponent(Dep depParam) {
    this.dep = depParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public TestComponent self() {
    return this;
  }

  @Override
  public Dep dep() {
    return dep;
  }

  @Override
  public String methodOnDep() {
    return Preconditions.checkNotNullFromComponent(dep.string());
  }

  @Override
  public Object otherMethodOnDep() {
    return Preconditions.checkNotNullFromComponent(dep.object());
  }

  @Override
  public TestSubcomponent subcomponent() {
    return new TestSubcomponentImpl(testComponent);
  }

  static final class Builder {
    private Dep dep;

    private Builder() {
    }

    public Builder dep(Dep dep) {
      this.dep = Preconditions.checkNotNull(dep);
      return this;
    }

    public TestComponent build() {
      Preconditions.checkBuilderRequirement(dep, Dep.class);
      return new DaggerTestComponent(dep);
    }
  }

  private static final class TestSubcomponentImpl implements TestSubcomponent {
    private final DaggerTestComponent testComponent;

    private final TestSubcomponentImpl testSubcomponentImpl = this;

    private TestSubcomponentImpl(DaggerTestComponent testComponent) {
      this.testComponent = testComponent;


    }

    @Override
    public TestComponent parent() {
      return testComponent;
    }

    @Override
    public Dep depFromSubcomponent() {
      return testComponent.dep;
    }
  }
}

