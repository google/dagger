package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.MapFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private MapModuleOne mapModuleOne;

    private MapModuleTwo mapModuleTwo;

    private Builder() {
    }

    public Builder mapModuleOne(MapModuleOne mapModuleOne) {
      this.mapModuleOne = Preconditions.checkNotNull(mapModuleOne);
      return this;
    }

    public Builder mapModuleTwo(MapModuleTwo mapModuleTwo) {
      this.mapModuleTwo = Preconditions.checkNotNull(mapModuleTwo);
      return this;
    }

    public TestComponent build() {
      if (mapModuleOne == null) {
        this.mapModuleOne = new MapModuleOne();
      }
      if (mapModuleTwo == null) {
        this.mapModuleTwo = new MapModuleTwo();
      }
      return new TestComponentImpl(mapModuleOne, mapModuleTwo);
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImplShard testComponentImplShard;

    private final MapModuleOne mapModuleOne;

    private final MapModuleTwo mapModuleTwo;

    private final TestComponentImpl testComponentImpl = this;

    private TestComponentImpl(MapModuleOne mapModuleOneParam, MapModuleTwo mapModuleTwoParam) {
      this.mapModuleOne = mapModuleOneParam;
      this.mapModuleTwo = mapModuleTwoParam;
      testComponentImplShard = new TestComponentImplShard(testComponentImpl, mapModuleOneParam, mapModuleTwoParam);
    }

    @Override
    public Provider<Map<PathEnum, Handler>> dispatcher() {
      return testComponentImpl.testComponentImplShard.mapOfPathEnumAndHandlerProvider;
    }
  }

  private static final class TestComponentImplShard {
    private final TestComponentImpl testComponentImpl;

    private Provider<Handler> provideAdminHandlerProvider;

    private Provider<Handler> provideLoginHandlerProvider;

    private Provider<Map<PathEnum, Handler>> mapOfPathEnumAndHandlerProvider;

    private TestComponentImplShard(TestComponentImpl testComponentImpl,
        MapModuleOne mapModuleOneParam, MapModuleTwo mapModuleTwoParam) {
      this.testComponentImpl = testComponentImpl;
      initialize(mapModuleOneParam, mapModuleTwoParam);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MapModuleOne mapModuleOneParam,
        final MapModuleTwo mapModuleTwoParam) {
      this.provideAdminHandlerProvider = MapModuleOne_ProvideAdminHandlerFactory.create(testComponentImpl.mapModuleOne);
      this.provideLoginHandlerProvider = MapModuleTwo_ProvideLoginHandlerFactory.create(testComponentImpl.mapModuleTwo);
      this.mapOfPathEnumAndHandlerProvider = MapFactory.<PathEnum, Handler>builder(2).put(PathEnum.ADMIN, provideAdminHandlerProvider).put(PathEnum.LOGIN, provideLoginHandlerProvider).build();
    }
  }
}

