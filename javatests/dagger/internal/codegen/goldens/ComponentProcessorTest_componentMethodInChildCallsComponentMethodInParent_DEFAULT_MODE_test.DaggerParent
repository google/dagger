package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerParent implements Parent {
  private final DaggerParent parent = this;

  private Provider<Number> numberProvider;

  private DaggerParent() {

    initialize();

  }

  public static Builder builder() {
    return new Builder();
  }

  public static Parent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize() {
    this.numberProvider = DoubleCheck.provider(TestModule_NumberFactory.create());
  }

  @Override
  public String string() {
    return TestModule_StringFactory.string(numberProvider.get());
  }

  @Override
  public Child child() {
    return new ChildImpl(parent);
  }

  static final class Builder {
    private Builder() {
    }

    public Parent build() {
      return new DaggerParent();
    }
  }

  private static final class ChildImpl implements Child {
    private final DaggerParent parent;

    private final ChildImpl childImpl = this;

    private ChildImpl(DaggerParent parent) {
      this.parent = parent;


    }

    @Override
    public String string() {
      return parent.string();
    }
  }
}

