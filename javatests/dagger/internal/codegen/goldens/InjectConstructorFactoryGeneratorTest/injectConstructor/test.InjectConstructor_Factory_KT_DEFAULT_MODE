package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Provider;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.annotation.processing.Generated;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class InjectConstructor_Factory implements Factory<Object> {
  private final Provider<String> sProvider;

  private InjectConstructor_Factory(Provider<String> sProvider) {
    this.sProvider = sProvider;
  }

  @Override
  public Object get() {
    return newInstance(sProvider.get());
  }

  public static InjectConstructor_Factory create(Provider<?> sProvider) {
    return new InjectConstructor_Factory((Provider<String>) (sProvider));
  }

  public static Object newInstance(Object s) {
    return new InjectConstructor((String) (s));
  }
}
