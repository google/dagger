package test;

import com.google.common.collect.ImmutableMap;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerParent {
  private DaggerParent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static Parent create() {
    return new Builder().build();
  }

  static final class Builder {
    private ParentModule parentModule;

    private Builder() {
    }

    public Builder parentModule(ParentModule parentModule) {
      this.parentModule = Preconditions.checkNotNull(parentModule);
      return this;
    }

    public Parent build() {
      if (parentModule == null) {
        this.parentModule = new ParentModule();
      }
      return new ParentImpl(parentModule);
    }
  }

  private static final class ChildImpl implements Child {
    private final ChildImplShard childImplShard;

    private final ParentImpl parentImpl;

    private final ChildImpl childImpl = this;

    private ChildImpl(ParentImpl parentImpl) {
      this.parentImpl = parentImpl;

      childImplShard = new ChildImplShard(parentImpl, childImpl);
    }

    @Override
    public Map<String, Object> objectMap() {
      return childImpl.childImplShard.mapOfStringAndObject();
    }
  }

  private static final class ParentImpl implements Parent {
    private final ParentModule parentModule;

    private final ParentImpl parentImpl = this;

    private ParentImpl(ParentModule parentModuleParam) {
      this.parentModule = parentModuleParam;

    }

    @Override
    public Child child() {
      return new ChildImpl(parentImpl);
    }
  }

  private static final class ChildImplShard {
    private final ParentImpl parentImpl;

    private final ChildImpl childImpl;

    private ChildImplShard(ParentImpl parentImpl, ChildImpl childImpl) {
      this.parentImpl = parentImpl;
      this.childImpl = childImpl;
    }

    private Map<String, Object> mapOfStringAndObject() {
      return ImmutableMap.<String, Object>of("parent key", ParentModule_ParentKeyObjectFactory.parentKeyObject(parentImpl.parentModule));
    }
  }
}

