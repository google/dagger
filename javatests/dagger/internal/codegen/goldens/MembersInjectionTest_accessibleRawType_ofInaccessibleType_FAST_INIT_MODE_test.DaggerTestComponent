package test;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.List;
import javax.annotation.processing.Generated;
import javax.inject.Provider;
import other.InaccessiblesModule;
import other.InaccessiblesModule_InaccessiblesFactory;
import other.UsesInaccessibles;
import other.UsesInaccessibles_Factory;
import other.UsesInaccessibles_MembersInjector;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder inaccessiblesModule(InaccessiblesModule inaccessiblesModule) {
      Preconditions.checkNotNull(inaccessiblesModule);
      return this;
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImplShard testComponentImplShard;

    private final TestComponentImpl testComponentImpl = this;

    private TestComponentImpl() {

      testComponentImplShard = new TestComponentImplShard(testComponentImpl);
    }

    @Override
    public UsesInaccessibles usesInaccessibles() {
      return testComponentImpl.testComponentImplShard.usesInaccessibles();
    }
  }

  private static final class TestComponentImplShard {
    private final TestComponentImpl testComponentImpl;

    @SuppressWarnings("rawtypes")
    private Provider inaccessiblesProvider;

    private TestComponentImplShard(TestComponentImpl testComponentImpl) {
      this.testComponentImpl = testComponentImpl;
      initialize();
    }

    private UsesInaccessibles usesInaccessibles() {
      return injectUsesInaccessibles(UsesInaccessibles_Factory.newInstance());
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.inaccessiblesProvider = DoubleCheck.provider(new SwitchingProvider<List>(testComponentImpl, 0));
    }

    @CanIgnoreReturnValue
    private UsesInaccessibles injectUsesInaccessibles(UsesInaccessibles instance) {
      UsesInaccessibles_MembersInjector.injectInaccessibles(instance, (List) inaccessiblesProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final TestComponentImpl testComponentImpl;

      private final int id;

      SwitchingProvider(TestComponentImpl testComponentImpl, int id) {
        this.testComponentImpl = testComponentImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // java.util.List<other.Inaccessible> 
          return (T) InaccessiblesModule_InaccessiblesFactory.inaccessibles();

          default: throw new AssertionError(id);
        }
      }
    }
  }
}

