package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerBComponent implements BComponent {
  private final DaggerBComponent bComponent = this;

  private Provider<String[]> stringsProvider;

  private DaggerBComponent(ArrayComponent arrayComponentParam) {

    initialize(arrayComponentParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ArrayComponent arrayComponentParam) {
    this.stringsProvider = new StringsProvider(arrayComponentParam);
  }

  @Override
  public B b() {
    return new B(stringsProvider);
  }

  static final class Builder {
    private ArrayComponent arrayComponent;

    private Builder() {
    }

    public Builder arrayComponent(ArrayComponent arrayComponent) {
      this.arrayComponent = Preconditions.checkNotNull(arrayComponent);
      return this;
    }

    public BComponent build() {
      Preconditions.checkBuilderRequirement(arrayComponent, ArrayComponent.class);
      return new DaggerBComponent(arrayComponent);
    }
  }

  private static final class StringsProvider implements Provider<String[]> {
    private final ArrayComponent arrayComponent;

    StringsProvider(ArrayComponent arrayComponent) {
      this.arrayComponent = arrayComponent;
    }

    @Override
    public String[] get() {
      return Preconditions.checkNotNullFromComponent(arrayComponent.strings());
    }
  }
}

