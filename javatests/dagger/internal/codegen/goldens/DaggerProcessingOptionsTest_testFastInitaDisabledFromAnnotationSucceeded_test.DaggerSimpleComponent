package test;

import dagger.Lazy;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerSimpleComponent implements SimpleComponent {
  private final DaggerSimpleComponent simpleComponent = this;

  private DaggerSimpleComponent() {


  }

  public static Builder builder() {
    return new Builder();
  }

  public static SimpleComponent create() {
    return new Builder().build();
  }

  @Override
  public SomeInjectableType someInjectableType() {
    return new SomeInjectableType();
  }

  @Override
  public Lazy<SomeInjectableType> lazySomeInjectableType() {
    return DoubleCheck.lazy(SomeInjectableType_Factory.create());
  }

  @Override
  public Provider<SomeInjectableType> someInjectableTypeProvider() {
    return SomeInjectableType_Factory.create();
  }

  static final class Builder {
    private Builder() {
    }

    public SimpleComponent build() {
      return new DaggerSimpleComponent();
    }
  }
}

