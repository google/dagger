package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Provider;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import java.util.List;
import javax.annotation.processing.Generated;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation",
    "nullness:initialization.field.uninitialized"
})
public final class InjectConstructor_Factory implements Factory<Object> {
  private final Provider<List<?>> objectsProvider;

  private InjectConstructor_Factory(Provider<List<?>> objectsProvider) {
    this.objectsProvider = objectsProvider;
  }

  @Override
  public Object get() {
    return newInstance(objectsProvider.get());
  }

  public static InjectConstructor_Factory create(Provider<?> objectsProvider) {
    return new InjectConstructor_Factory((Provider<List<?>>) (objectsProvider));
  }

  public static Object newInstance(Object objects) {
    return new InjectConstructor((List<?>) (objects));
  }
}
