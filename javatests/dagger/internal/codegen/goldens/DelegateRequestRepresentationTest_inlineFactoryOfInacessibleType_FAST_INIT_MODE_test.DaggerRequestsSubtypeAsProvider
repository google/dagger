package test;

import dagger.internal.DaggerGenerated;
import javax.annotation.processing.Generated;
import javax.inject.Provider;
import other.Subtype_Factory;
import other.Supertype;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerRequestsSubtypeAsProvider implements RequestsSubtypeAsProvider {
  private final DaggerRequestsSubtypeAsProvider requestsSubtypeAsProvider = this;

  @SuppressWarnings("rawtypes")
  private Provider subtypeProvider;

  private DaggerRequestsSubtypeAsProvider() {

    initialize();

  }

  public static Builder builder() {
    return new Builder();
  }

  public static RequestsSubtypeAsProvider create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize() {
    this.subtypeProvider = new SwitchingProvider<>(requestsSubtypeAsProvider, 0);
  }

  @Override
  public Provider<Supertype> supertypeProvider() {
    return subtypeProvider;
  }

  static final class Builder {
    private Builder() {
    }

    public RequestsSubtypeAsProvider build() {
      return new DaggerRequestsSubtypeAsProvider();
    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerRequestsSubtypeAsProvider requestsSubtypeAsProvider;

    private final int id;

    SwitchingProvider(DaggerRequestsSubtypeAsProvider requestsSubtypeAsProvider, int id) {
      this.requestsSubtypeAsProvider = requestsSubtypeAsProvider;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // other.Subtype 
        return (T) Subtype_Factory.newInstance();

        default: throw new AssertionError(id);
      }
    }
  }
}

