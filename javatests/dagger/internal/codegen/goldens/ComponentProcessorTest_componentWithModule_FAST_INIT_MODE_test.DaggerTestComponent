package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerTestComponent implements TestComponent {
  private final TestModule testModule;

  private final DaggerTestComponent testComponent = this;

  private DaggerTestComponent(TestModule testModuleParam) {
    this.testModule = testModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  private B b() {
    return TestModule_BFactory.b(testModule, new C());
  }

  @Override
  public A a() {
    return new A(b());
  }

  static final class Builder {
    private TestModule testModule;

    private Builder() {
    }

    public Builder testModule(TestModule testModule) {
      this.testModule = Preconditions.checkNotNull(testModule);
      return this;
    }

    public TestComponent build() {
      if (testModule == null) {
        this.testModule = new TestModule();
      }
      return new DaggerTestComponent(testModule);
    }
  }
}

