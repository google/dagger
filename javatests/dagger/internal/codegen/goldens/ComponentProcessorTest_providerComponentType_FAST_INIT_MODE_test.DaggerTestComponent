package test;

import dagger.internal.DaggerGenerated;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerTestComponent implements TestComponent {
  private final DaggerTestComponent testComponent = this;

  private Provider<Foo> fooProvider;

  private DaggerTestComponent() {

    initialize();

  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize() {
    this.fooProvider = new SwitchingProvider<>(testComponent, 0);
  }

  @Override
  public SomeEntryPoint someEntryPoint() {
    return new SomeEntryPoint(fooProvider.get(), fooProvider);
  }

  public static final class Builder {
    private Builder() {
    }

    public TestComponent build() {
      return new DaggerTestComponent();
    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerTestComponent testComponent;

    private final int id;

    SwitchingProvider(DaggerTestComponent testComponent, int id) {
      this.testComponent = testComponent;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // test.Foo 
        return (T) new Foo(new Bar());

        default: throw new AssertionError(id);
      }
    }
  }
}

