package test;

import dagger.internal.DaggerGenerated;
import javax.annotation.processing.Generated;
import javax.inject.Provider;
import other.Subtype_Factory;
import other.Supertype;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerRequestsSubtypeAsProvider {
  private DaggerRequestsSubtypeAsProvider() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static RequestsSubtypeAsProvider create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public RequestsSubtypeAsProvider build() {
      return new RequestsSubtypeAsProviderImpl();
    }
  }

  private static final class RequestsSubtypeAsProviderImpl implements RequestsSubtypeAsProvider {
    private final RequestsSubtypeAsProviderImplShard requestsSubtypeAsProviderImplShard;

    private final RequestsSubtypeAsProviderImpl requestsSubtypeAsProviderImpl = this;

    private RequestsSubtypeAsProviderImpl() {

      requestsSubtypeAsProviderImplShard = new RequestsSubtypeAsProviderImplShard(requestsSubtypeAsProviderImpl);
    }

    @Override
    public Provider<Supertype> supertypeProvider() {
      return requestsSubtypeAsProviderImpl.requestsSubtypeAsProviderImplShard.subtypeProvider;
    }
  }

  private static final class RequestsSubtypeAsProviderImplShard {
    private final RequestsSubtypeAsProviderImpl requestsSubtypeAsProviderImpl;

    @SuppressWarnings("rawtypes")
    private Provider subtypeProvider;

    private RequestsSubtypeAsProviderImplShard(
        RequestsSubtypeAsProviderImpl requestsSubtypeAsProviderImpl) {
      this.requestsSubtypeAsProviderImpl = requestsSubtypeAsProviderImpl;
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.subtypeProvider = new SwitchingProvider<>(requestsSubtypeAsProviderImpl, 0);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final RequestsSubtypeAsProviderImpl requestsSubtypeAsProviderImpl;

      private final int id;

      SwitchingProvider(RequestsSubtypeAsProviderImpl requestsSubtypeAsProviderImpl, int id) {
        this.requestsSubtypeAsProviderImpl = requestsSubtypeAsProviderImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // other.Subtype 
          return (T) Subtype_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }
}

