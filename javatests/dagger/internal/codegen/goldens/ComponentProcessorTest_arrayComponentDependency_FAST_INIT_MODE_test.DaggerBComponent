package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerBComponent {
  private DaggerBComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  static final class Builder {
    private ArrayComponent arrayComponent;

    private Builder() {
    }

    public Builder arrayComponent(ArrayComponent arrayComponent) {
      this.arrayComponent = Preconditions.checkNotNull(arrayComponent);
      return this;
    }

    public BComponent build() {
      Preconditions.checkBuilderRequirement(arrayComponent, ArrayComponent.class);
      return new BComponentImpl(arrayComponent);
    }
  }

  private static final class BComponentImpl implements BComponent {
    private final BComponentImplShard bComponentImplShard;

    private final ArrayComponent arrayComponent;

    private final BComponentImpl bComponentImpl = this;

    private BComponentImpl(ArrayComponent arrayComponentParam) {
      this.arrayComponent = arrayComponentParam;
      bComponentImplShard = new BComponentImplShard(bComponentImpl, arrayComponentParam);
    }

    @Override
    public B b() {
      return bComponentImpl.bComponentImplShard.b();
    }
  }

  private static final class BComponentImplShard {
    private final BComponentImpl bComponentImpl;

    private Provider<String[]> stringsProvider;

    private BComponentImplShard(BComponentImpl bComponentImpl, ArrayComponent arrayComponentParam) {
      this.bComponentImpl = bComponentImpl;
      initialize(arrayComponentParam);
    }

    private B b() {
      return new B(stringsProvider);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ArrayComponent arrayComponentParam) {
      this.stringsProvider = new SwitchingProvider<>(bComponentImpl, 0);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final BComponentImpl bComponentImpl;

      private final int id;

      SwitchingProvider(BComponentImpl bComponentImpl, int id) {
        this.bComponentImpl = bComponentImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // java.lang.String[] 
          return (T) Preconditions.checkNotNullFromComponent(bComponentImpl.arrayComponent.strings());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}

