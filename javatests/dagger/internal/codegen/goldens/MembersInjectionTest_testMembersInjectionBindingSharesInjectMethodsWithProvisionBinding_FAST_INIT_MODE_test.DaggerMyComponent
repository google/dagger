package test;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.internal.DaggerGenerated;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyComponent {
  private DaggerMyComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static MyComponent create() {
    return new Builder().build();
  }

  public static final class Builder {
    private Builder() {
    }

    public MyComponent build() {
      return new MyComponentImpl();
    }
  }

  private static final class MyComponentImpl implements MyComponent {
    private final MyComponentImplShard myComponentImplShard;

    private final MyComponentImpl myComponentImpl = this;

    private MyComponentImpl() {

      myComponentImplShard = new MyComponentImplShard(myComponentImpl);
    }

    @Override
    public Foo foo() {
      return myComponentImpl.myComponentImplShard.foo();
    }

    @Override
    public void inject(Foo foo) {
      myComponentImpl.myComponentImplShard.injectFoo(foo);
    }
  }

  private static final class MyComponentImplShard {
    private final MyComponentImpl myComponentImpl;

    private MyComponentImplShard(MyComponentImpl myComponentImpl) {
      this.myComponentImpl = myComponentImpl;
    }

    private Foo foo() {
      return injectFoo(Foo_Factory.newInstance());
    }

    @CanIgnoreReturnValue
    private Foo injectFoo(Foo instance) {
      Foo_MembersInjector.injectBar(instance, new Bar());
      return instance;
    }
  }
}

