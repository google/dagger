package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import javax.annotation.processing.Generated;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerBComponent {
  private DaggerBComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  static final class Builder {
    private AComponent aComponent;

    private Builder() {
    }

    public Builder aComponent(AComponent aComponent) {
      this.aComponent = Preconditions.checkNotNull(aComponent);
      return this;
    }

    public BComponent build() {
      Preconditions.checkBuilderRequirement(aComponent, AComponent.class);
      return new BComponentImpl(aComponent);
    }
  }

  private static final class BComponentImpl implements BComponent {
    private final BComponentImplShard bComponentImplShard;

    private final AComponent aComponent;

    private final BComponentImpl bComponentImpl = this;

    private BComponentImpl(AComponent aComponentParam) {
      this.aComponent = aComponentParam;
      bComponentImplShard = new BComponentImplShard(bComponentImpl, aComponentParam);
    }

    @Override
    public InjectedType injectedType() {
      return bComponentImpl.bComponentImplShard.injectedType();
    }
  }

  private static final class BComponentImplShard {
    private final BComponentImpl bComponentImpl;

    private BComponentImplShard(BComponentImpl bComponentImpl, AComponent aComponentParam) {
      this.bComponentImpl = bComponentImpl;
    }

    private InjectedType injectedType() {
      return new InjectedType(Preconditions.checkNotNullFromComponent(bComponentImpl.aComponent.someStringInjection()), bComponentImpl.aComponent.someIntInjection(), bComponentImpl.aComponent, Preconditions.checkNotNullFromComponent(bComponentImpl.aComponent.someClassInjection()));
    }
  }
}

