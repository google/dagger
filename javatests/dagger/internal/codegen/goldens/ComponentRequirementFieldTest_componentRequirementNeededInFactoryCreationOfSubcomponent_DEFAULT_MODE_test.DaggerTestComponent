package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import dagger.internal.SetFactory;
import java.util.Set;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private ParentModule parentModule;

    private Builder() {
    }

    public Builder parentModule(ParentModule parentModule) {
      this.parentModule = Preconditions.checkNotNull(parentModule);
      return this;
    }

    public TestComponent build() {
      if (parentModule == null) {
        this.parentModule = new ParentModule();
      }
      return new TestComponentImpl(parentModule);
    }
  }

  private static final class TestSubcomponentImpl implements TestSubcomponent {
    private final TestSubcomponentImplShard testSubcomponentImplShard;

    private final TestComponentImpl testComponentImpl;

    private final TestSubcomponentImpl testSubcomponentImpl = this;

    private TestSubcomponentImpl(TestComponentImpl testComponentImpl) {
      this.testComponentImpl = testComponentImpl;

      testSubcomponentImplShard = new TestSubcomponentImplShard(testComponentImpl, testSubcomponentImpl);
    }

    @Override
    public Provider<Object> dependsOnMultibinding() {
      return testSubcomponentImpl.testSubcomponentImplShard.reliesOnMultibindingProvider;
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImplShard testComponentImplShard;

    private final ParentModule parentModule;

    private final TestComponentImpl testComponentImpl = this;

    private TestComponentImpl(ParentModule parentModuleParam) {
      this.parentModule = parentModuleParam;
      testComponentImplShard = new TestComponentImplShard(testComponentImpl, parentModuleParam);
    }

    @Override
    public Provider<Object> dependsOnMultibinding() {
      return testComponentImpl.testComponentImplShard.reliesOnMultibindingProvider;
    }

    @Override
    public TestSubcomponent subcomponent() {
      return new TestSubcomponentImpl(testComponentImpl);
    }
  }

  private static final class TestSubcomponentImplShard {
    private final TestComponentImpl testComponentImpl;

    private final TestSubcomponentImpl testSubcomponentImpl;

    private Provider<Set<Object>> setOfObjectProvider;

    private Provider<Object> reliesOnMultibindingProvider;

    private TestSubcomponentImplShard(TestComponentImpl testComponentImpl,
        TestSubcomponentImpl testSubcomponentImpl) {
      this.testComponentImpl = testComponentImpl;
      this.testSubcomponentImpl = testSubcomponentImpl;
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.setOfObjectProvider = SetFactory.<Object>builder(2, 0).addProvider(ParentModule_ContributionFactory.create()).addProvider(ChildModule_ContributionFactory.create()).build();
      this.reliesOnMultibindingProvider = ParentModule_ReliesOnMultibindingFactory.create(testComponentImpl.parentModule, setOfObjectProvider);
    }
  }

  private static final class TestComponentImplShard {
    private final TestComponentImpl testComponentImpl;

    private Provider<Set<Object>> setOfObjectProvider;

    private Provider<Object> reliesOnMultibindingProvider;

    private TestComponentImplShard(TestComponentImpl testComponentImpl,
        ParentModule parentModuleParam) {
      this.testComponentImpl = testComponentImpl;
      initialize(parentModuleParam);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ParentModule parentModuleParam) {
      this.setOfObjectProvider = SetFactory.<Object>builder(1, 0).addProvider(ParentModule_ContributionFactory.create()).build();
      this.reliesOnMultibindingProvider = ParentModule_ReliesOnMultibindingFactory.create(testComponentImpl.parentModule, setOfObjectProvider);
    }
  }
}

