package test;

import dagger.internal.DaggerGenerated;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  public static final class Builder {
    private Builder() {
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent {
    private final TestComponentImplShard testComponentImplShard;

    private final TestComponentImpl testComponentImpl = this;

    private TestComponentImpl() {

      testComponentImplShard = new TestComponentImplShard(testComponentImpl);
    }

    @Override
    public SomeEntryPoint someEntryPoint() {
      return testComponentImpl.testComponentImplShard.someEntryPoint();
    }
  }

  private static final class TestComponentImplShard {
    private final TestComponentImpl testComponentImpl;

    private Provider<Foo> fooProvider;

    private TestComponentImplShard(TestComponentImpl testComponentImpl) {
      this.testComponentImpl = testComponentImpl;
      initialize();
    }

    private Foo foo() {
      return new Foo(new Bar());
    }

    private SomeEntryPoint someEntryPoint() {
      return new SomeEntryPoint(foo(), fooProvider);
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.fooProvider = Foo_Factory.create(Bar_Factory.create());
    }
  }
}

