package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
final class DaggerBComponent implements BComponent {
  private final AComponent aComponent;

  private final DaggerBComponent bComponent = this;

  private Provider<A> aProvider;

  private DaggerBComponent(AComponent aComponentParam) {
    this.aComponent = aComponentParam;
    initialize(aComponentParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AComponent aComponentParam) {
    this.aProvider = new SwitchingProvider<>(bComponent, 0);
  }

  @Override
  public B b() {
    return new B(aProvider);
  }

  static final class Builder {
    private AComponent aComponent;

    private Builder() {
    }

    public Builder aComponent(AComponent aComponent) {
      this.aComponent = Preconditions.checkNotNull(aComponent);
      return this;
    }

    public BComponent build() {
      Preconditions.checkBuilderRequirement(aComponent, AComponent.class);
      return new DaggerBComponent(aComponent);
    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerBComponent bComponent;

    private final int id;

    SwitchingProvider(DaggerBComponent bComponent, int id) {
      this.bComponent = bComponent;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // test.A 
        return (T) Preconditions.checkNotNullFromComponent(bComponent.aComponent.a());

        default: throw new AssertionError(id);
      }
    }
  }
}

